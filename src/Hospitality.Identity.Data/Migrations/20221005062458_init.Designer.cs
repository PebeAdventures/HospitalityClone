// <auto-generated />
using System;
using Hospitality.Identity.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospitality.Identity.Data.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20221005062458_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d0972bc6-60cd-4562-a85d-6a13a1c462bf",
                            ConcurrencyStamp = "1b0ca002-34d7-4fd1-931d-52892caf14a4",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "88824469-45e2-4f82-b226-445c8dbdcc0c",
                            ConcurrencyStamp = "258247cd-a795-4d5b-adfc-926ed36a4354",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "28f73cb2-571c-4d56-a2a9-7b3065c47c93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89fc1aa6-6514-4ddf-98ff-b0eb2b514450",
                            Email = "doctor",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEPv/DFCBJNm3MMjYrdj9KaYOkwjtrzK3YmdkyRNrNYxmWAOia1fDWDKVJ73fu2pphw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d32091d-12f0-404b-a737-d95d34b4d76d",
                            TwoFactorEnabled = false,
                            UserName = "Dr. House"
                        },
                        new
                        {
                            Id = "033c4e30-4d0f-4570-a420-b6883df5cb61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a41f9d6-833d-4b21-9624-0c131dffd648",
                            Email = "dolittle",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOLITTLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDigsrS1t28dmH5NKtc6er8TDT97zYSGA5j6HyAQ+QhNiwMgsYejGuvdn/d0IxdG3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6dc068c8-d289-41b5-ac09-1eb3700f2839",
                            TwoFactorEnabled = false,
                            UserName = "Dr. Dolittle"
                        },
                        new
                        {
                            Id = "0f77eff7-4769-4dcf-95b0-ce5dc3196386",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91c45501-a3e9-4963-b2b9-4ced85b891c8",
                            Email = "oetker",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OETKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRyByrTpXJEARcdfOvIQ5Ae5fjAF3I3XyWbSy1fMaUlUrw7J2X8Jyiexy/prySFrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46a1f23d-6dc5-46fb-82f1-f46c2ff0adf1",
                            TwoFactorEnabled = false,
                            UserName = "Dr. oetker"
                        },
                        new
                        {
                            Id = "2ed5da07-9f48-4e60-b2b4-802c599ba0ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f941f460-e002-410d-a0c2-be0cfbd9b6c3",
                            Email = "receptionist",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTIONIST",
                            PasswordHash = "AQAAAAEAACcQAAAAEEAjtv+1SxbMck4769FGnqAxysFyMitZe7DhsHvBNalvKhORt8Vnusrj8fxWuiaa1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0af4861c-cc46-45f6-b525-c2798c7d831d",
                            TwoFactorEnabled = false,
                            UserName = "Danuta Nowak"
                        },
                        new
                        {
                            Id = "4e9d961e-fbee-41a6-b7f0-565a69901571",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e696eca3-e169-43a7-93fc-2c9c922a839e",
                            Email = "rafik",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAFIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEAWQg0KBhPZmhURGJZ98ZgP9NzzQojt0uV4WVwQhYjeyTbrg/7gmKDHaBRwyvQdH0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39ca1da2-3cf5-4f1a-bb05-fd6062bbb531",
                            TwoFactorEnabled = false,
                            UserName = "Rafał Wyrwikoński"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "28f73cb2-571c-4d56-a2a9-7b3065c47c93",
                            RoleId = "d0972bc6-60cd-4562-a85d-6a13a1c462bf"
                        },
                        new
                        {
                            UserId = "033c4e30-4d0f-4570-a420-b6883df5cb61",
                            RoleId = "d0972bc6-60cd-4562-a85d-6a13a1c462bf"
                        },
                        new
                        {
                            UserId = "0f77eff7-4769-4dcf-95b0-ce5dc3196386",
                            RoleId = "d0972bc6-60cd-4562-a85d-6a13a1c462bf"
                        },
                        new
                        {
                            UserId = "2ed5da07-9f48-4e60-b2b4-802c599ba0ce",
                            RoleId = "88824469-45e2-4f82-b226-445c8dbdcc0c"
                        },
                        new
                        {
                            UserId = "4e9d961e-fbee-41a6-b7f0-565a69901571",
                            RoleId = "88824469-45e2-4f82-b226-445c8dbdcc0c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

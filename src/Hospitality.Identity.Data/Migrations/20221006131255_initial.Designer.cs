// <auto-generated />
using System;
using Hospitality.Identity.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospitality.Identity.Data.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20221006131255_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "489e7461-c152-42cc-a19c-41c033773b23",
                            ConcurrencyStamp = "075dd9b9-e38d-4f1d-be45-bd4bb4a76e90",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "7761f598-77cc-40a6-9f3a-a1867ca04362",
                            ConcurrencyStamp = "ea1f053b-57d4-4267-8fc0-8c78385eda8f",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3798b373-3f00-4988-87c6-7ffac1d8c208",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "047e817b-4a5b-4c27-89ea-a5a97d89b1c4",
                            Email = "doctor",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAENhLHqF7Ih+4q4NtrLWa9S0bGg1qYHOrvg8fRifEStUywutIrdMlZCu5xCj2xZdpuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d757a7b-6d43-437b-8d8e-ca158c8d88f8",
                            TwoFactorEnabled = false,
                            UserName = "Dr. House"
                        },
                        new
                        {
                            Id = "658d6515-9ab3-4454-9e8a-5eeeecda484c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "377f19f6-40b8-4d90-b786-8e22204a64a4",
                            Email = "dolittle",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOLITTLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEGKvmwZ6ETSh0xp5YfCpEsKuow6AJFhbrBIKHXhSncuw9Kt4RaLrIgeTvBkfAbqX8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ec89c33-a7e3-42b6-854a-eaf3eb2756cc",
                            TwoFactorEnabled = false,
                            UserName = "Dr. Dolittle"
                        },
                        new
                        {
                            Id = "e5c80ea0-a08c-40c2-b6b2-1674d5160038",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c7331be-09ba-48c7-98ae-73424d8a5bec",
                            Email = "oetker",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OETKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMSo471/w2e4V6LV68qJfMMapjfaakJbYBwP9BFRXoenfXbhkx7fxzXTU/PG4n6ccA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9746c5db-bff1-4f8b-9e85-33bf5f43e985",
                            TwoFactorEnabled = false,
                            UserName = "Dr. oetker"
                        },
                        new
                        {
                            Id = "e09df49e-f891-4062-bc43-9e4aa5e39391",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84814a2c-a2b9-416f-be17-f19c16a322da",
                            Email = "receptionist",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTIONIST",
                            PasswordHash = "AQAAAAEAACcQAAAAEHy+qim1sm8CbuXCFHFdhKYXj/jJZKSxcEeYvMgMQaSQeJs4SWd0YofTYTqKtEoEBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0284d9a-2f38-40b0-8bc2-d5875a77f89b",
                            TwoFactorEnabled = false,
                            UserName = "Danuta Nowak"
                        },
                        new
                        {
                            Id = "35c426aa-d574-45bd-bc33-c68a432523b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dcbf1ef-4bfa-40dd-9be3-0975e1f4d43a",
                            Email = "rafik",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAFIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlDIq/bTg2RC3G+/1/0D9ZrD96V+/4W8nV9mg0JbGzz6BImiYTBm0Ht8oK3TzPrdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0ef1b2e-c827-44cf-8c3c-cd667451e841",
                            TwoFactorEnabled = false,
                            UserName = "Rafał Wyrwikoński"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3798b373-3f00-4988-87c6-7ffac1d8c208",
                            RoleId = "489e7461-c152-42cc-a19c-41c033773b23"
                        },
                        new
                        {
                            UserId = "658d6515-9ab3-4454-9e8a-5eeeecda484c",
                            RoleId = "489e7461-c152-42cc-a19c-41c033773b23"
                        },
                        new
                        {
                            UserId = "e5c80ea0-a08c-40c2-b6b2-1674d5160038",
                            RoleId = "489e7461-c152-42cc-a19c-41c033773b23"
                        },
                        new
                        {
                            UserId = "e09df49e-f891-4062-bc43-9e4aa5e39391",
                            RoleId = "7761f598-77cc-40a6-9f3a-a1867ca04362"
                        },
                        new
                        {
                            UserId = "35c426aa-d574-45bd-bc33-c68a432523b2",
                            RoleId = "7761f598-77cc-40a6-9f3a-a1867ca04362"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Hospitality.Identity.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospitality.Identity.Data.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80a69908-d17f-484f-b914-c2a7e0de991d",
                            ConcurrencyStamp = "4fffdd90-3ac9-47a7-811b-5e3024c038d6",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "0a37bd75-b6cc-45fd-8df3-f218c26091e0",
                            ConcurrencyStamp = "88fa303e-71e2-458f-b14d-16cca2cb9d4d",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dcf2dab1-c760-4c8c-b658-7d5d04488a40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a125451-b31b-4e77-99f4-a0f1993f28f7",
                            Email = "doctor",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEAxvsWmmKGQLnKoIYKa+wc+lYT8u5ELqj22Sd1PJPd6i5JZkrxYJRXq0rPvPUKi6UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2b8197d-ab09-4f5f-99d8-edd3d930c52f",
                            TwoFactorEnabled = false,
                            UserName = "Dr. House"
                        },
                        new
                        {
                            Id = "7dbaa17d-2be3-4ee4-ac23-bde619ecf601",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2440f82-fb3c-420f-8e05-c0ba63369866",
                            Email = "dolittle",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOLITTLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBxzcn9CXkw4veXSCLroicQ9YXJHLidPLcBL39GFQr4iwauouqUUQL7klXN/lsFK3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "085f2626-39f9-459c-9a78-bde243853848",
                            TwoFactorEnabled = false,
                            UserName = "Dr. Dolittle"
                        },
                        new
                        {
                            Id = "2f01fe6a-7ab9-4822-9c27-0f379169fb18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce5682e2-823e-4a94-8fe1-97cd7948c677",
                            Email = "oetker",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OETKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAny6RZypLv2sc5MdEzE9UR6BnK1oE+4eb1AcgCAHb3bVRj0Bo8dOuZzouGXRG+LqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2eff81a0-73d4-48a9-88d0-fb615eb5d2b1",
                            TwoFactorEnabled = false,
                            UserName = "Dr. oetker"
                        },
                        new
                        {
                            Id = "f03c49e0-bd2e-40ff-a0be-fe3511c424c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21536fdd-4082-49bf-8d76-eff222008a62",
                            Email = "receptionist",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTIONIST",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmbwg9yBzaFoA9GStkSHazpPfpDMGgVI00NnKPNhc23Ub2iKNHrIId/PS1TaMD4oQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f8c5011-9390-4792-9d72-6ad4f048c6d3",
                            TwoFactorEnabled = false,
                            UserName = "Danuta Nowak"
                        },
                        new
                        {
                            Id = "f8454cab-a31b-4ea9-9c86-dbdb6bd2a4c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c266b47-ff68-4d35-bb3c-bdc40f194674",
                            Email = "rafik",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAFIK",
                            PasswordHash = "AQAAAAEAACcQAAAAEOSQcBZPhe2LlS0g7/6+B5YbJqkhvpblpgwU7ufbrvfldOIuFj5+af1HolEMP+HUDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce81515f-30c5-4744-be60-88c17d27ab25",
                            TwoFactorEnabled = false,
                            UserName = "Rafał Wyrwikoński"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dcf2dab1-c760-4c8c-b658-7d5d04488a40",
                            RoleId = "80a69908-d17f-484f-b914-c2a7e0de991d"
                        },
                        new
                        {
                            UserId = "7dbaa17d-2be3-4ee4-ac23-bde619ecf601",
                            RoleId = "80a69908-d17f-484f-b914-c2a7e0de991d"
                        },
                        new
                        {
                            UserId = "2f01fe6a-7ab9-4822-9c27-0f379169fb18",
                            RoleId = "80a69908-d17f-484f-b914-c2a7e0de991d"
                        },
                        new
                        {
                            UserId = "f03c49e0-bd2e-40ff-a0be-fe3511c424c3",
                            RoleId = "0a37bd75-b6cc-45fd-8df3-f218c26091e0"
                        },
                        new
                        {
                            UserId = "f8454cab-a31b-4ea9-9c86-dbdb6bd2a4c8",
                            RoleId = "0a37bd75-b6cc-45fd-8df3-f218c26091e0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

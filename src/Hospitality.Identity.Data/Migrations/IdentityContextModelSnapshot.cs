// <auto-generated />
using System;
using Hospitality.Identity.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospitality.Identity.Data.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ed9eed33-c203-48ab-bc62-c2cc179ebc19",
                            ConcurrencyStamp = "ec9055f2-9afc-47fd-af4f-6f7413b73a8c",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "da063050-01bb-4643-9cfe-63395fb43d9c",
                            ConcurrencyStamp = "e7d798e2-c248-4e12-8791-74d4ff39d393",
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ac73cca8-651b-4f04-8a13-fa49ed3dbdfb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52204548-169e-49a8-b56f-e168fc9e9752",
                            Email = "doctor",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEF3LBkcWowdYx53GkV0r6OTvCPjMggTIsdnukVFeiAx4E733IjxSkCq3zaTaov1Q6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25251b24-c619-480c-8cb8-f32a85c75c9b",
                            TwoFactorEnabled = false,
                            UserName = "Dr. House"
                        },
                        new
                        {
                            Id = "c4afda1a-4443-4b63-9dda-4493f18ca342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c35aade9-0235-40ad-b65e-420db0f1b829",
                            Email = "dolittle",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOLITTLE",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cad55573-0a07-4bfe-9598-486fbfc6cbd2",
                            TwoFactorEnabled = false,
                            UserName = "Dr. Dolittle"
                        },
                        new
                        {
                            Id = "b2be0d80-20c4-4c96-b779-321328cc5bbb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4eae479f-812b-435d-8bd2-ea6685e1208a",
                            Email = "oetker",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OETKER",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3923c36a-fd91-448e-964a-7cbb652ee719",
                            TwoFactorEnabled = false,
                            UserName = "Dr. oetker"
                        },
                        new
                        {
                            Id = "d7a2a3eb-5b64-4073-bdb8-b26617e3d97b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed3b10fb-6b1c-496c-a815-a272025201fa",
                            Email = "receptionist",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTIONIST",
                            PasswordHash = "AQAAAAEAACcQAAAAECanongNINz6CdyBqquHDgTo5VOf7NdqBCIUn/1oi1/Z5W/p6BesacjIC2BIrJp86Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "398cf517-8768-4027-98d5-eb6859a48092",
                            TwoFactorEnabled = false,
                            UserName = "Danuta Nowak"
                        },
                        new
                        {
                            Id = "3f2c6575-5dac-4234-89f1-2ad8cff0b5c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c10c7c21-1bae-4a70-86e2-1c568ff98229",
                            Email = "rafik",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAFIK",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b687759-0bad-44dc-936b-e2692d31d036",
                            TwoFactorEnabled = false,
                            UserName = "Rafał Wyrwikoński"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ac73cca8-651b-4f04-8a13-fa49ed3dbdfb",
                            RoleId = "ed9eed33-c203-48ab-bc62-c2cc179ebc19"
                        },
                        new
                        {
                            UserId = "c4afda1a-4443-4b63-9dda-4493f18ca342",
                            RoleId = "ed9eed33-c203-48ab-bc62-c2cc179ebc19"
                        },
                        new
                        {
                            UserId = "b2be0d80-20c4-4c96-b779-321328cc5bbb",
                            RoleId = "ed9eed33-c203-48ab-bc62-c2cc179ebc19"
                        },
                        new
                        {
                            UserId = "d7a2a3eb-5b64-4073-bdb8-b26617e3d97b",
                            RoleId = "da063050-01bb-4643-9cfe-63395fb43d9c"
                        },
                        new
                        {
                            UserId = "3f2c6575-5dac-4234-89f1-2ad8cff0b5c9",
                            RoleId = "da063050-01bb-4643-9cfe-63395fb43d9c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
